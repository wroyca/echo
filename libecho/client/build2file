include     ../
impl_libs = ../lib{echo}

lib{echo-client}: {h c}{* -client.resource.c} \
                    {c}{client.resource.c}    \
  $impl_libs $intf_libs

# Resource bundle.
#
if ($glib-compile-resources != [null])
{
  c{client.resource.c}: x{client.resource.xml}
  {{
    diag glib-compile-resources ($<[0]) -> $>

    r = $path($<[0])
    b = $out_base/$name($>).c

    glib-compile-resources \
      --sourcedir $src_base --generate-source $r --target=$b
  }}

  c{client.resource.c}:
  {
    dist = true
    clean = ($src_root != $out_root)
    backlink = overwrite
  }
}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: c.poptions += -DLIBECHO_UI_STATIC_BUILD
{hbmis objs}{*}: c.poptions += -DLIBECHO_UI_SHARED_BUILD

# Export options.
#
lib{echo-client}:
{
  c.export.poptions = "-I$out_root" "-I$src_root"
  c.export.libs = $intf_libs
}

liba{echo-client}: c.export.poptions += -DLIBECHO_UI_STATIC
libs{echo-client}: c.export.poptions += -DLIBECHO_UI_SHARED

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{echo-client}: bin.lib.version = "-$version.project_id"
else
  lib{echo-client}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libecho/client/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
h{*}:
{
  install         = include/libecho/client/
  install.subdirs = true
}
