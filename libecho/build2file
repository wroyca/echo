plug_libs = # Plugin dependencies.
intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

plug_libs =+ ui/
intf_libs =+ %lib{adwaita-1 peas-2}

./: lib{echo}  $plug_libs
    include    $plug_libs
./: lib{echo}: {h c}{* -echo.resource.c}  \
                 {c}{echo.resource.c}     \
  $impl_libs $intf_libs

# Resource bundle.
#
c{echo.resource.c}: file{echo.resource.xml}
{{
  diag glib-compile-resources ($<[0]) -> $>

  r = $path($<[0])
  b = $out_base/$name($>).c

  glib-compile-resources \
    --sourcedir $src_base --generate-source $r --target=$b
}}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: c.poptions += -DLIBECHO_STATIC_BUILD
{hbmis objs}{*}: c.poptions += -DLIBECHO_SHARED_BUILD

# Export options.
#
lib{echo}:
{
  c.export.poptions = "-I$out_root" "-I$src_root"
  c.export.libs = $intf_libs
}

liba{echo}: c.export.poptions += -DLIBECHO_STATIC
libs{echo}: c.export.poptions += -DLIBECHO_SHARED

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{echo}: bin.lib.version = "-$version.project_id"
else
  lib{echo}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libecho/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
h{*}:
{
  install         = include/libecho/
  install.subdirs = true
}
