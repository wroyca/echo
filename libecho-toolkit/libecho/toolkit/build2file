import! glib-compile-resources = glib-compile-resources%exe{glib-compile-resources}

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
pkgs_libs = %lib{adwaita-1 peas-2}

lib{echo-toolkit}: {h c}{** -version -resource} h{version} c{resource} \
  $impl_libs $intf_libs $pkgs_libs

h{version}: in{version} $src_root/manifest

# Resource bundle.
#
if ($glib-compile-resources != [null])
{
  define xml: file
  define ui: file

  xml{*}: extension = xml
  ui{*}: extension = ui

  c{resource}: xml{resource} ui{**}
  {{
    diag glib-compile-resources ($<[0]) -> $>

    res = $path($<[0])
    bundle = $out_base/$name($>).c

    glib-compile-resources \
      --sourcedir $src_base --generate-source $res --target=$bundle
  }}

  c{resource}:
  {
    # Include the generated resource into the distribution and don't remove it
    # when cleaning in src (so that clean results in a state identical to
    # distributed).
    #
    dist = true
    clean = ($src_root != $out_root)

    # We keep the generated resource in the repository so copy it back to src
    # in case of a forwarded configuration.
    #
    backlink = overwrite
  }
}

# Build options.
#
c.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: c.poptions += -DLIBECHO_TOOLKIT_STATIC_BUILD -DLIBECHO_TOOLKIT_COMPILATION
objs{*}: c.poptions += -DLIBECHO_TOOLKIT_SHARED_BUILD -DLIBECHO_TOOLKIT_COMPILATION

# Export options.
#
lib{echo-toolkit}:
{
  c.export.poptions = "-I$out_root" "-I$src_root"
  c.export.libs = $intf_libs
}

liba{echo-toolkit}: c.export.poptions += -DLIBECHO_TOOLKIT_STATIC
libs{echo-toolkit}: c.export.poptions += -DLIBECHO_TOOLKIT_SHARED

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{echo-toolkit}: bin.lib.version = "-$version.project_id"
else
  lib{echo-toolkit}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libecho/toolkit/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
h{*}:
{
  install         = include/libecho/toolkit/
  install.subdirs = true
}
