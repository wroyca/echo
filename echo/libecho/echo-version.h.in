/* echo-version.h
 *
 * Copyright 2024 William Roy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#pragma once

#if !defined(ECHO_INSIDE) && !defined(ECHO_COMPILATION)
#  error "Only <libecho/echo.h> can be included directly."
#endif

#include <glib.h>

G_BEGIN_DECLS

/**
 * ECHO_MAJOR_VERSION:
 *
 * echo major version component (e.g. 1 if %ECHO_VERSION is 1.2.3)
 */
#define ECHO_MAJOR_VERSION ($echo.version.major$)

/**
 * ECHO_MINOR_VERSION:
 *
 * echo minor version component (e.g. 2 if %ECHO_VERSION is 1.2.3)
 */
#define ECHO_MINOR_VERSION ($echo.version.minor$)

/**
 * ECHO_PATCH_VERSION:
 *
 * echo patch version component (e.g. 3 if %ECHO_VERSION is 1.2.3)
 */
#define ECHO_PATCH_VERSION ($echo.version.patch$)

/**
 * ECHO_VERSION
 *
 * echo version.
 */
#define ECHO_VERSION ($echo.version.project_number$ULL)

/**
 * ECHO_VERSION_S:
 *
 * echo version, encoded as a string, useful for printing and
 * concatenation.
 */
#define ECHO_VERSION_S "$echo.version.project$"

/**
 * ECHO_ENCODE_VERSION:
 * @major: The major version component
 * @minor: The minor version component
 * @micro: The patch version component
 *
 * Encodes the given components into a value that can be used for
 * version checks.
 *
 * Since: 0.1
 */
#define ECHO_ENCODE_VERSION(major,minor,patch) \
        ((major) << 24 | (minor) << 16 | (patch) << 8)

/**
 * ECHO_VERSION_HEX:
 *
 * echo version, encoded as an hexadecimal number, useful for
 * integer comparisons.
 */
#define ECHO_VERSION_HEX \
       (ECHO_ENCODE_VERSION (ECHO_MAJOR_VERSION,  \
                             ECHO_MINOR_VERSION,  \
                             ECHO_PATCH_VERSION))

/**
 * ECHO_CHECK_VERSION:
 * @major: the required major version component
 * @minor: the required minor version component
 * @patch: the required patch version component
 *
 * Compile-time version checking.
 *
 * Evaluates to %TRUE if %ECHO_VERSION is greater than the required one; %FALSE
 * otherwise.
 */
#define ECHO_CHECK_VERSION(major,minor,patch) \
       (ECHO_MAJOR_VERSION  > (major)  ||     \
       (ECHO_MAJOR_VERSION == (major)  &&     \
        ECHO_MINOR_VERSION  > (minor)) ||     \
       (ECHO_MAJOR_VERSION == (major)  &&     \
        ECHO_PATCH_VERSION == (minor)  &&     \
        ECHO_PATCH_VERSION >= (patch)))

/* XXX: Every new stable minor release bump should add a macro here. */

/**
 * ECHO_VERSION_0_1:
 *
 * A macro that evaluates to the 0.1 version of Echo, in a format
 * that can be used by the C pre-processor.
 *
 * Since: 0.1
 */
#define ECHO_VERSION_0_1 (ECHO_ENCODE_VERSION (0, 1, 0))

#ifndef _ECHO_EXTERN
#  define _ECHO_EXTERN extern
#endif

#if defined(ECHO_DISABLE_DEPRECATION_WARNINGS) || defined(ECHO_COMPILATION)
#  define _ECHO_DEPRECATED             _ECHO_EXTERN
#  define _ECHO_DEPRECATED_FOR(f)      _ECHO_EXTERN
#  define _ECHO_DEPRECATED_TYPE
#  define _ECHO_DEPRECATED_TYPE_FOR(f)
#else
#  define _ECHO_DEPRECATED             G_DEPRECATED        _ECHO_EXTERN
#  define _ECHO_DEPRECATED_FOR(f)      G_DEPRECATED_FOR(f) _ECHO_EXTERN
#  define _ECHO_DEPRECATED_TYPE        G_DEPRECATED
#  define _ECHO_DEPRECATED_TYPE_FOR(f) G_DEPRECATED_FOR(f)
#endif

/**
 * ECHO_VERSION_MIN_REQUIRED:
 *
 * A macro that defines Echo API lower bound.
 *
 * This should be defined prior to including any libecho headers and must be
 * one of the predefined version macros, such as %ECHO_VERSION_0_1.
 *
 * If a function has been deprecated in a newer version, it is possible to use
 * this symbol to avoid the compiler warnings.
 */
#ifndef ECHO_VERSION_MIN_REQUIRED
#  define ECHO_VERSION_MIN_REQUIRED ECHO_VERSION_0_1
#endif

/**
 * ECHO_VERSION_MAX_ALLOWED:
 *
 * A macro that defines Echo API upper bound.
 *
 * This should be defined prior to including any libecho headers and must be
 * one of the predefined version macros, such as %ECHO_VERSION_0_1.
 *
 * If a function has been introduced in a newer version, it is possible to use
 * this symbol to emit a compiler warning upon usage.
 */
#ifndef ECHO_VERSION_MAX_ALLOWED
#  define ECHO_VERSION_MAX_ALLOWED ECHO_VERSION_0_1
#endif

#if ECHO_VERSION_MAX_ALLOWED < ECHO_VERSION_MIN_REQUIRED
#  error "ECHO_VERSION_MAX_ALLOWED must be >= ECHO_VERSION_MIN_REQUIRED"
#endif

#if ECHO_VERSION_MIN_REQUIRED < ECHO_VERSION_0_1
#  error "ECHO_VERSION_MIN_REQUIRED must be >= ECHO_VERSION_0_1"
#endif

/* XXX: Every new stable minor release should add a set of macros here */

#if ECHO_VERSION_MIN_REQUIRED >= ECHO_VERSION_0_1
#  define ECHO_DEPRECATED_IN_0_1             _ECHO_DEPRECATED
#  define ECHO_DEPRECATED_IN_0_1_FOR(f)      _ECHO_DEPRECATED_FOR(f)
#  define ECHO_DEPRECATED_TYPE_IN_0_1        _ECHO_DEPRECATED_TYPE
#  define ECHO_DEPRECATED_TYPE_IN_0_1_FOR(f) _ECHO_DEPRECATED_TYPE_FOR(f)
#else
#  define ECHO_DEPRECATED_IN_0_1             _ECHO_EXTERN
#  define ECHO_DEPRECATED_IN_0_1_FOR(f)      _ECHO_EXTERN
#  define ECHO_DEPRECATED_TYPE_IN_0_1
#  define ECHO_DEPRECATED_TYPE_IN_0_1_FOR(f)
#endif

#if ECHO_VERSION_MAX_ALLOWED < ECHO_VERSION_0_1
#  define ECHO_AVAILABLE_IN_0_1 ECHO_UNAVAILABLE(1, 0)
#else
#  define ECHO_AVAILABLE_IN_0_1 _ECHO_EXTERN
#endif

#define ECHO_UNAVAILABLE(major, minor) G_UNAVAILABLE(major, minor) _ECHO_EXTERN
#define ECHO_AVAILABLE_IN_ALL _ECHO_EXTERN

ECHO_AVAILABLE_IN_ALL
guint echo_get_major_version (void) G_GNUC_CONST;
ECHO_AVAILABLE_IN_ALL
guint echo_get_minor_version (void) G_GNUC_CONST;
ECHO_AVAILABLE_IN_ALL
guint echo_get_patch_version (void) G_GNUC_CONST;

G_END_DECLS
